### 서론 - 어떤 내용을 다룰 것인지

- Apple silicon 환경에서 minikube를 활용해 로컬로 kubeflow 구축하는 방법을 설명
- 웹에서 예시로 설명하는 경우 Silicon에서 실행 되지 않을 가능성 높음
  - 예시에서 자주사용하는 hyperkit은 macos에서 사용 불가
  - kubelfow 1.6이하는 M1에서 실행 불가
- kubeflow 사용이 목적이라면 cloud기반 Arriko를 사용할 것

### 본론 - 세부 내용

- Apple silicon(m1,m2)환경 설치 시 유의사항
  - 설명한대로 설치하지 않는 이상 에러 발생 가능성 높음
  - 가상머신 분야는 Arm64 호환이 완벽하지 않기 때문임.
- 기존 설치된 프로그램 제거
  - minikube
  - kubectl
  - kustomize
  - brew cleanup
- kubeflow 설치에 필요한 버전으로 재설치
  - 순서대로 설치할 것
  - colima(선택사항)
    - colima를 설치하면 Docker Desktop을 대체할 수 있음.
    - 실행이 간단하고 DockerDesktop 대비 적은 메모리 사용
  - kustomize
    - 버전 체크
  - kubectl
    - 버전체크
  - minikube
- kubeflow 1.6 local로 저장
  - Apple silicon 환경에서는 kubeflow 1.6 버전 이후 설치가 가능함
  - kubeflow 1.6 부터 isito 1.16버전이 적용되는데, isito 1.16 버전부터 apple silicon(arm64)을 지원하기 때문
  - git clone and cd manifests
- minikube에서 kubeflow 불러오기

  - kubeflow는 수십개의 pod로 구성되어 있음.
  - 이를 하나하나 불러오는 방법도 있지만 다음의 명령어를 사용하면 한 번에 불러올 수 있음.
  - ! 트러블 슈팅 : 1.6 버전에서 아래의 명령어를 실행하면 무한 루프에 빠질 수 있음. 정상적인 경우라면 1분 내 루프가 종료되지만, 5분이 지나도 멈추지 않는 경우 `control(^)+C` 를 눌러 종료할 것. 강제종료해도 kubeflow 실행 시 문제없음.

  ```bash
  while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
  ```

  - 아래 명령어로 pods가 실행되는 과정을 실시간으로 모니터링할 수 있음. `control(^)+C` 를 누르면 종료 가능
  - 모든 pod가 실행되기까지 다소 시간이 소요됨. 10~40분 사이에 모든 pod가 정상적으로 실행됨.

  ```bash
  kubectl get pods --all-namespaces -w
  ```

  - ! 트러블 슈팅 : training-operator 실행 시 `crashloopbackoff` 발생하는 경우 아래의 명령어로 해결

    ```bash
    kubectl apply -k "github.com/kubeflow/training-operator/manifests/overlays/standalone"
    ```

  - 모든 pod가 정상적으로 실행되면 아래의 명령어를 순서대로 실행

    - profile controller와 usernamespace는 모든 pod를 불러오는 명령어가 무한루프에 빠지지 않았다면 실행할 필요 없음.
    - 무한 루프를 `control(^)+C` 를 눌러 종료한 경우 profile controller와 usernamespace를 불러오지 않게 되므로 아래의 명령어를 실행해야함. 무한루프에 빠지게 된 원인이 profile controller와 usernamespace에 있기 때문임.

    ```bash
    # profile controller
    kustomize build apps/profiles/upstream/overlays/kubeflow | kubectl apply -f -

    # usernamespace
    kustomize build common/user-namespace/base | kubectl apply -f -
    ```

  - pod 활성화여부 최종확인
    ```bash
    kubectl get pods -n cert-manager
    kubectl get pods -n istio-system
    kubectl get pods -n auth
    kubectl get pods -n knative-eventing
    kubectl get pods -n knative-serving
    kubectl get pods -n kubeflow
    kubectl get pods -n kubeflow-user-example-com
    ```
  - kubeflow 실행
    ```bash
    kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80
    ```
  - dex 아이디 비밀번호
    - Email Address: `user@example.com`
    - Password: `12341234`

- 정상작동 확인하기
  - jupyternotebook
  - kfM
